import random
import shutil
import numpy as np
import pickle

# script to initialise experiment

# get passed arguments
import sys
dir=str(sys.argv[1])
k_val=int(sys.argv[2])
Num_traj=int(sys.argv[3])
dir_init=str(sys.argv[4])

# Set run parameters
Num_iter = 16
tau = 8
Ta = Num_iter*tau
soil_conf=0.5

# sample randomly from initial conditions and creates files
initial_sample = random.sample((range(1,1095)),Num_traj)

for i in range(Num_traj):
    shutil.copy(dir_init+'/state'+str(initial_sample[i]), dir+'/traj'+str(i+1))

# initialise initial values for algorithm - 
# R_log - keeps track of the biasing in the algorithm
# pert_flag - keeps track of trajectories to be perturbed before simulation
# T - stores the trajectories generated by the algorithm
# link - keeps track of the links between data files from the trajectories

R_log=0

pert_flag=np.zeros(Num_traj)

T=[]
for i in range(Num_traj):
    T.append([])

link=[]
for i in range(Num_traj):
    link.append([])

# creates and writes values

with open(dir+'/config', 'wb') as f:
    pickle.dump([k_val, Num_traj, tau, Ta, soil_conf], f)

with open(dir+'/R_log', 'wb') as f:
    pickle.dump([R_log], f)

with open(dir+'/pert_flag', 'wb') as f:
    pickle.dump(pert_flag, f)

with open(dir+'/T', 'wb') as f:
    pickle.dump(T, f)

with open(dir+'/link', 'wb') as f:
    pickle.dump(link, f)

# pass_init indicates completion of the script
with open(dir+'/pass_init', 'wb') as f:
    pickle.dump([], f)
